#!/usr/bin/env ruby
# frozen_string_literal: true

require 'active_support/core_ext/time'
require 'byebug'
require 'find'
require 'optparse'
require 'photo/postmortem/exif'
require 'photo/postmortem/reader'
require 'spreadsheet'

def main
  options = parse_commandline_options

  if options[:start_photos_directory] && options[:end_photos_directory]
    start_times, _unused = get_photo_metadata([options[:start_photos_directory]],
                                              options[:timezone])
    end_times, _unused = get_photo_metadata([options[:end_photos_directory]],
                                            options[:timezone])
  end

  if options[:all_photos_directory]
    all_times, focal_lengths = get_photo_metadata(
      options[:all_photos_directory],
      options[:timezone]
    )
  end

  workbook = create_workbook
  add_to_date_worksheet(worksheet: workbook.worksheet(0),
                        all_times: all_times,
                        start_times: start_times,
                        end_times: end_times)

  by_camera_focal_lengths = focal_lengths.reject { |key| key == 'all' }
  add_to_focal_length_worksheet(worksheet: workbook.worksheet(1),
                                focal_lengths: by_camera_focal_lengths)

  all_focal_lengths = focal_lengths.slice('all')
  add_to_focal_length_worksheet(worksheet: workbook.worksheet(2),
                                focal_lengths: all_focal_lengths)

  workbook.write(options[:spreadsheet])
end

def add_time(rows, name, times)
  times.each do |time|
    date_str = to_local_date_string(time)
    rows[date_str] ||= {}
    rows[date_str][name] = to_local_time_string(time)
  end
end

def incr_time(rows, name, times)
  times.each do |time|
    date_str = to_local_date_string(time)
    rows[date_str] ||= {}
    rows[date_str][name] ||= 0
    rows[date_str][name] += 1
  end
end

def add_to_focal_length_worksheet(worksheet:,
                                  focal_lengths:)
  worksheet.insert_row(0, ['Camera', 'Focal Length', 'Count'])
  focal_lengths.each do |camera, counts|
    counts.each do |focal_length, count|
      worksheet.insert_row(1, [camera, focal_length, count])
    end
  end
end

def add_to_date_worksheet(worksheet:,
                          all_times:,
                          start_times:,
                          end_times:)
  rows = {}
  add_time(rows, :start, start_times) if start_times
  add_time(rows, :end, end_times) if end_times
  incr_time(rows, :all, all_times) if all_times

  worksheet.insert_row(0, ['Date', 'Start', 'End', 'Photo Count'])
  rows.sort.each do |date, values|
    worksheet.insert_row(1, [date, values[:start], values[:end], values[:all]])
  end
end

# Without this the Excel spreadsheet shows the time in UTC
def to_local_time_string(time)
  time.strftime('%Y/%m/%d %H:%M')
end

def to_local_date_string(time)
  time.strftime('%Y/%m/%d')
end

def create_workbook
  workbook = Spreadsheet::Workbook.new
  workbook.create_worksheet
  workbook.create_worksheet
  workbook.create_worksheet

  workbook
end

def get_photo_metadata(photos_directories, timezone)
  reader = Photo::Postmortem::Reader.new(timezone: timezone)
  photos_directories.each do |photos_directory|
    print "Reading #{photos_directory}"
    Find.find(photos_directory).each do |photo_path|
      next if File.directory?(photo_path)

      print '.'
      $stdout.flush

      reader.process(photo_path)
    end
    print "\n"
  end

  [reader.creation_times, reader.focal_lengths]
end

def parse_commandline_options
  options = {
    all_photos_directory: []
  }
  required_options = []
  option_parser = OptionParser.new do |opts| # rubocop:disable BlockLength
    opts.banner = 'Usage: photo-postmortem OPTIONS'

    required_options << 'spreadsheet'
    opts.on('--spreadsheet=FILENAME', 'The spreadsheet file to create') do |v|
      options[:spreadsheet] = v
    end

    opts.on('--start-photos-directory=DIRECTORY',
            'Directory containing start-of-day photos.') do |v|
      options[:start_photos_directory] = v
    end

    opts.on('--end-photos-directory=DIRECTORY',
            'Directory containing end-of-day photos.') do |v|
      options[:end_photos_directory] = v
    end

    opts.on('--all-photos-directory=DIRECTORY',
            'Directory containing all photos.') do |v|
      options[:all_photos_directory].push(v)
    end

    # EXIF does not store timezone information, so the times we get
    # from the EXIF APIs are all in the system's default timezone.  So
    # all this --timezone option does is shift the offset of all the
    # photos by the same amount.
    timezones = ActiveSupport::TimeZone.all.map(&:name).sort.join(', ')
    opts.on('--timezone=NAME',
            'Optional name of the timezone for the dates in the spreadsheet.' \
            " Supported timezones: #{timezones}") do |v|
      options[:timezone] = v
    end

    opts.on_tail('--help', 'This help message.') do
      puts opts
      exit
    end
  end

  option_parser.parse!

  required_options.each do |required_option|
    next unless options[required_option.tr('-', '_').to_sym].nil?

    raise OptionParser::MissingArgument, "--#{required_option}"
  end

  options
end

main
